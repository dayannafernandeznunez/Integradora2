package model;

/**
 * Class representing a player in the tournament.
 */
public class Player {
    private String name;
    private int age;
    private String position;

    /**
     * Constructor for the Player class.
     * @param name The name of the player.
     * @param age The age of the player.
     * @param position The position of the player.
     */
    public Player(String name, int age, String position) {
        setName(name);
        setAge(age);
        setPosition(position);
    }

    /**
     * Gets the player's name.
     * @return The name of the player.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the player's name.
     * @param name The name to set.
     * @throws IllegalArgumentException if the name is null or empty.
     */
    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Player name cannot be empty.");
        }
        this.name = name;
    }

    /**
     * Gets the player's age.
     * @return The age of the player.
     */
    public int getAge() {
        return age;
    }

    /**
     * Sets the player's age.
     * @param age The age to set.
     * @throws IllegalArgumentException if the age is less than or equal to 0.
     */
    public void setAge(int age) {
        if (age <= 0) {
            throw new IllegalArgumentException("Age must be greater than 0.");
        }
        this.age = age;
    }

    /**
     * Gets the player's position.
     * @return The position of the player.
     */
    public String getPosition() {
        return position;
    }

    /**
     * Sets the player's position.
     * @param position The position to set.
     * @throws IllegalArgumentException if the position is null or empty.
     */
    public void setPosition(String position) {
        if (position == null || position.trim().isEmpty()) {
            throw new IllegalArgumentException("Position cannot be empty.");
        }
        this.position = position;
    }
}
